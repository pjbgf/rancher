name: Build Pull Request
on:
  - push

permissions: 
  packages: write
env:
  ARCH: amd64
  TAG: v2.10-${{ github.sha }}-head
  GIT_TAG: v2.10-${{ github.sha }}-head
  HEAD_TAG: "head"
  COMMIT: ${{ github.sha }}
  REPOSITORY_OWNER: ${{ github.repository_owner }}
  IMAGE: ghcr.io/${{ github.repository_owner }}/rancher
  IMAGE_AGENT: ghcr.io/${{ github.repository_owner }}/rancher-agent
  IMAGE_INSTALLER: ghcr.io/${{ github.repository_owner }}/system-agent-installer-rancher
jobs:
  base-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name:
        run: make base
        env:
          BUILDX_ACTION: --push

  unit-tests:
    uses: ./.github/workflows/unit-test.yml

  build-chart:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - id: env 
        name: Setup Dependencies Env Variables
        uses: ./.github/actions/setup-build-env
      - name: Install dependencies
        env: 
          HELM_URL: https://get.helm.sh/helm-${{ steps.env.outputs.HELM_VERSION }}-linux-amd64.tar.gz
        run: |
          sudo snap install yq
          curl ${{ env.HELM_URL }} | tar xvzf - --strip-components=1 -C /tmp/ && \
          sudo mv /tmp/helm /usr/bin/helm_v3 && \
          sudo chmod +x /usr/bin/helm_v3
          helm_v3 plugin install https://github.com/helm-unittest/helm-unittest.git --version ${{ steps.env.outputs.HELM_UNITTEST_VERSION }}; \
      - name: Build
        run: ./scripts/chart/build chart
      - name: Validate
        run: ./scripts/chart/validate
      - name: Test
        run: ./scripts/chart/test
      - name: Package
        run: ./scripts/chart/package

  build-server:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux]
        arch: [amd64] #, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - id: env 
        name: Setup Dependencies Env Variables
        uses: ./.github/actions/setup-build-env
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE }}
          flavor: |
            latest=false
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and export server
        id: build
        uses: docker/build-push-action@v5
        with:
          push: false
          build-args: |
            "VERSION=${{ env.TAG }}"
            "COMMIT=${{ github.SHA }}"
            "RKE_VERSION=${{ steps.env.outputs.RKE_VERSION }}"
            "ARCH=${{ matrix.arch }}"
            "CATTLE_RANCHER_WEBHOOK_VERSION=${{ steps.env.outputs.CATTLE_RANCHER_WEBHOOK_VERSION }}"
            "CATTLE_CSP_ADAPTER_MIN_VERSION=${{ steps.env.outputs.CATTLE_CSP_ADAPTER_MIN_VERSION }}"
            "CATTLE_FLEET_VERSION=${{ steps.env.outputs.CATTLE_FLEET_VERSION }}"
            "RANCHER_BASE_IMAGE=ghcr.io/pjbgf/rancher/rancher-base:9c09832a0bed4b19933f499012db77c38ab83ad0b8b14e2451cd901536cf9e9a"
          tags: ${{ env.IMAGE }}:${{ env.TAG }}-${{ matrix.arch }}
          context: .
          platforms: "${{ matrix.os }}/${{ matrix.arch }}"
          file: ./package/Dockerfile
          labels: "${{ steps.meta.outputs.labels }}"
          outputs: type=docker,dest=/tmp/rancher-${{ matrix.os }}-${{ matrix.arch }}.tar
      - name: Upload image
        uses: actions/upload-artifact@v4
        with:
          name: "rancher-${{ matrix.os }}-${{ matrix.arch }}"
          path: /tmp/rancher-${{ matrix.os }}-${{ matrix.arch }}.tar
          if-no-files-found: error
          retention-days: 1
          overwrite: false
