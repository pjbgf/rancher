// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rancher/rancher/pkg/generated/norman/core/v1 (interfaces: SecretController)

// Package cavalidator is a generated GoMock package.
package cavalidator

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	controller "github.com/rancher/norman/controller"
	v1 "github.com/rancher/rancher/pkg/generated/norman/core/v1"
	cache "k8s.io/client-go/tools/cache"
)

// MockSecretController is a mock of SecretController interface.
type MockSecretController struct {
	ctrl     *gomock.Controller
	recorder *MockSecretControllerMockRecorder
}

// MockSecretControllerMockRecorder is the mock recorder for MockSecretController.
type MockSecretControllerMockRecorder struct {
	mock *MockSecretController
}

// NewMockSecretController creates a new mock instance.
func NewMockSecretController(ctrl *gomock.Controller) *MockSecretController {
	mock := &MockSecretController{ctrl: ctrl}
	mock.recorder = &MockSecretControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretController) EXPECT() *MockSecretControllerMockRecorder {
	return m.recorder
}

// AddClusterScopedFeatureHandler mocks base method.
func (m *MockSecretController) AddClusterScopedFeatureHandler(arg0 context.Context, arg1 func() bool, arg2, arg3 string, arg4 v1.SecretHandlerFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddClusterScopedFeatureHandler", arg0, arg1, arg2, arg3, arg4)
}

// AddClusterScopedFeatureHandler indicates an expected call of AddClusterScopedFeatureHandler.
func (mr *MockSecretControllerMockRecorder) AddClusterScopedFeatureHandler(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClusterScopedFeatureHandler", reflect.TypeOf((*MockSecretController)(nil).AddClusterScopedFeatureHandler), arg0, arg1, arg2, arg3, arg4)
}

// AddClusterScopedHandler mocks base method.
func (m *MockSecretController) AddClusterScopedHandler(arg0 context.Context, arg1, arg2 string, arg3 v1.SecretHandlerFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddClusterScopedHandler", arg0, arg1, arg2, arg3)
}

// AddClusterScopedHandler indicates an expected call of AddClusterScopedHandler.
func (mr *MockSecretControllerMockRecorder) AddClusterScopedHandler(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClusterScopedHandler", reflect.TypeOf((*MockSecretController)(nil).AddClusterScopedHandler), arg0, arg1, arg2, arg3)
}

// AddFeatureHandler mocks base method.
func (m *MockSecretController) AddFeatureHandler(arg0 context.Context, arg1 func() bool, arg2 string, arg3 v1.SecretHandlerFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddFeatureHandler", arg0, arg1, arg2, arg3)
}

// AddFeatureHandler indicates an expected call of AddFeatureHandler.
func (mr *MockSecretControllerMockRecorder) AddFeatureHandler(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFeatureHandler", reflect.TypeOf((*MockSecretController)(nil).AddFeatureHandler), arg0, arg1, arg2, arg3)
}

// AddHandler mocks base method.
func (m *MockSecretController) AddHandler(arg0 context.Context, arg1 string, arg2 v1.SecretHandlerFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddHandler", arg0, arg1, arg2)
}

// AddHandler indicates an expected call of AddHandler.
func (mr *MockSecretControllerMockRecorder) AddHandler(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHandler", reflect.TypeOf((*MockSecretController)(nil).AddHandler), arg0, arg1, arg2)
}

// Enqueue mocks base method.
func (m *MockSecretController) Enqueue(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Enqueue", arg0, arg1)
}

// Enqueue indicates an expected call of Enqueue.
func (mr *MockSecretControllerMockRecorder) Enqueue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockSecretController)(nil).Enqueue), arg0, arg1)
}

// EnqueueAfter mocks base method.
func (m *MockSecretController) EnqueueAfter(arg0, arg1 string, arg2 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EnqueueAfter", arg0, arg1, arg2)
}

// EnqueueAfter indicates an expected call of EnqueueAfter.
func (mr *MockSecretControllerMockRecorder) EnqueueAfter(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueAfter", reflect.TypeOf((*MockSecretController)(nil).EnqueueAfter), arg0, arg1, arg2)
}

// Generic mocks base method.
func (m *MockSecretController) Generic() controller.GenericController {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(controller.GenericController)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockSecretControllerMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockSecretController)(nil).Generic))
}

// Informer mocks base method.
func (m *MockSecretController) Informer() cache.SharedIndexInformer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Informer")
	ret0, _ := ret[0].(cache.SharedIndexInformer)
	return ret0
}

// Informer indicates an expected call of Informer.
func (mr *MockSecretControllerMockRecorder) Informer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Informer", reflect.TypeOf((*MockSecretController)(nil).Informer))
}

// Lister mocks base method.
func (m *MockSecretController) Lister() v1.SecretLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lister")
	ret0, _ := ret[0].(v1.SecretLister)
	return ret0
}

// Lister indicates an expected call of Lister.
func (mr *MockSecretControllerMockRecorder) Lister() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lister", reflect.TypeOf((*MockSecretController)(nil).Lister))
}
